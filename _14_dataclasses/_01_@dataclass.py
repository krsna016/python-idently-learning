from dataclasses import dataclass


# The @dataclass decorator automatically generates special methods for the class,
# such as __init__, __repr__, __eq__, etc., based on the class attributes.
@dataclass
class Coin:
    # Attributes of the data class with their types specified.
    name: str  # Name of the cryptocurrency
    value: float  # Value of the cryptocurrency
    id: str  # Unique identifier or symbol of the cryptocurrency # In data-class we can use built-in names without any problem


# # Creating the same dataclass using the regular class:
# class Coin:  # type: ignore
#     def __init__(self, name: str, value: float, coin_id: str) -> None:
#         self.name = name
#         self.value = value
#         self.id = id


# Main function to demonstrate the usage of the Coin data class
def main() -> None:
    # Creating instances of the Coin data class
    bitcoin: Coin = Coin("Bitcoin", 10_000, "BTC")
    bitcoin1: Coin = Coin("Bitcoin", 10_000, "BTC")
    ripple: Coin = Coin("Ripple", 200, "XRP")

    # Printing the instances; the __repr__ method is auto-generated by @dataclass
    print(bitcoin1)
    print(ripple)

    print(bitcoin == ripple)
    print(bitcoin == bitcoin1)

    print(bitcoin1.value)


# Entry point of the script
if __name__ == '__main__':
    main()
