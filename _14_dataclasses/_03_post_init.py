from dataclasses import dataclass, field


# The @dataclass decorator automatically generates special methods for the class,
# such as __init__, __repr__, __eq__, etc., based on the class attributes.
@dataclass
class Fruit:
    # Attributes of the data class with their types specified.
    name: str  # Name of the fruit
    grams: float  # Weight of the fruit in grams
    price_per_kg: float  # Price of the fruit per kilogram
    total_price: float = field(init=False)  # Total price, calculated in __post_init__

    # The __post_init__ method is called automatically after the __init__ method.
    # It is used to perform additional initialization, such as calculating derived attributes and run only once.
    def __post_init__(self) -> None:
        # Calculate the total price based on grams and price per kilogram.
        self.total_price: float = (self.grams / 1000) * self.price_per_kg

    # Method to describe the fruit and its cost.
    def describe(self) -> None:
        print(f"""{self.grams} grams of {self.name} costs {self.total_price} dollars.""")


# Main function to demonstrate the usage of the Fruit data class
def main() -> None:
    # Creating instances of the Fruit data class
    apple: Fruit = Fruit("Apple", 1500, 5)  # 1500 grams of Apple at $5 per kg

    orange: Fruit = Fruit("Orange", 2500, 8)  # 2500 grams of Orange at $8 per kg

    # Printing the instances; the __repr__ method is auto-generated by @dataclass
    print(apple)
    print(orange)

    # Calling the describe method to display details about the fruits
    apple.describe()
    apple.price_per_kg = 100  # Not make any change as post init only run once
    apple.describe()
    orange.describe()


# Entry point of the script
if __name__ == '__main__':
    main()
